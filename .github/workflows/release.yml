name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        lancedb: ["0.3.1", "0.3.4", "0.5", "0.16.0", "0.24.3"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-lancedb-${{ matrix.lancedb }}
          type=ref,event=pr,suffix=-lancedb-${{ matrix.lancedb }}
          type=semver,pattern=app-{{version}}_lancedb-${{ matrix.lancedb }}
          type=raw,value=lancedb-${{ matrix.lancedb }}
          type=raw,value=latest,enable=${{ matrix.lancedb == '0.24.3' && github.ref == 'refs/heads/main' }}
          type=raw,value=stable,enable=${{ matrix.lancedb == '0.24.3' && startsWith(github.ref, 'refs/tags/') }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha,scope=lancedb-${{ matrix.lancedb }}
        cache-to: type=gha,mode=max,scope=lancedb-${{ matrix.lancedb }}
        build-args: |
          LANCEDB_VERSION=${{ matrix.lancedb }}

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lancedb: ["0.3.1", "0.3.4", "0.5", "0.16.0", "0.24.3"]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -c backend/constraints-${{ matrix.lancedb }}.txt \
          -r backend/requirements.txt
        pip install httpx  # Required for TestClient

    - name: Test API endpoints
      run: |
        cd backend
        python -c "
        import app
        import lancedb
        import pyarrow
        from fastapi.testclient import TestClient

        # Get the FastAPI app instance from the module
        fastapi_app = getattr(app, 'app', app)
        client = TestClient(fastapi_app)

        # Print version information
        print(f'Testing with LanceDB {lancedb.__version__}, PyArrow {pyarrow.__version__}')

        # Test health endpoint
        response = client.get('/healthz')
        assert response.status_code == 200
        assert response.json()['ok'] == True
        print('✓ Health check passed')

        # Test datasets endpoint (will fail without data but should not crash)
        try:
            response = client.get('/datasets')
            print('✓ Datasets endpoint accessible')
        except Exception as e:
            print(f'✓ Datasets endpoint handled error gracefully: {e}')

        print('✓ All API tests passed!')
        "